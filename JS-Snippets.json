{
	"ACTION_STRING_CONSTS":
	{
		"prefix": "asc",
		"body": [
			"export const ${2:THING}_START = \"${2:THING}_START\"" ,
			"export const ${2:THING}_SUCCESS = \"${2:THING}_SUCCESS\"" ,
			"export const ${2:THING}_FAIL = \"${2:THING}_FAIL\""
		],
		"description": "make some action string consts"
	},
	"export const thing":
	{
		"prefix": "expc",
		"body": "export const ${2:thing}",
		"description": "make an export const thing"
	},
	"export const function":
	{
		"prefix": "expf",
		"body": [
			"export const ${2:functionName} = () =>",
			"{",
			"\t",
			"}"
		],
		"description": "make an export const thing"
	},
	"describe it block":
	{
		"prefix": "dib",
		"body": [
			"describe('${2:thing}', () =>",
			"{",
			"\tit('', () =>",
			"\t{",
			"\t\t",
			"\t})",
			"})"
		],
		"description": "makes a describe it block"
	},
	"it block":
	{
		"prefix": "itb",
		"body": [
			"it('${2:thing}', () =>",
			"{\n",
			"})"
		],
		"description": "makes an it block"
	},
	"import BrowserRouter as Router, and wrap app":
	{
		"prefix": "brr",
		"body": [
			"import {BrowserRouter as Router} from 'react-router-dom'",
			"\n",
			"ReactDOM.render(",
			"\t<Router>",
			"\t\t<App />",
			"\t</Router>,",
			"\tdocument.getElementById('root')",
			");"
		],
		"description": "import BrowserRouter as Router, and wrap app"
	},
	"import BrowserRouter as Router, Redux, Reaxt-Redux, thunk and wrap app":
	{
		"prefix": "brprt",
		"body": [
			"import {BrowserRouter as Router} from 'react-router-dom'",
			"import { createStore, applyMiddleware } from 'redux'",
			"import { Provider } from 'react-redux'",
			"import thunk from 'redux-thunk'",
			"import {${2:reducerName}} from './reducers'\n",
			"const store = createStore(${2:reducerName}, applyMiddleware(thunk))\n",
			"ReactDOM.render(",
			"\t<Provider store={store} >",
			"\t\t<Router>",
			"\t\t\t<App />",
			"\t\t</Router>",
			"\t</Provider>,",
			"\tdocument.getElementById('root')",
			");"
		],
		"description": "import BrowserRouter as Router, Redux, Reaxt-Redux, thunk and wrap app"
	},
	"Register User Action":
	{
		"prefix": "rgu",
		"body": [
			"export const registerUser = (regInfo) => dispatch =>",
			"{",
			"\tdispatch({ type: REGISTER_USER_START })\n",
			"\taxios",
			"\t\t.post(`\\${endPoint}/register`, regInfo)",
			"\t\t.then(res =>",
			"\t\t\t{",
			"\t\t\t\tconsole.log(\"res from registerUser:\", res)",
			"\t\t\t\tdispatch({ type: REGISTER_USER_SUCCESS, payload: res })",
			"\t\t\t})",
			"\t\t.catch(err =>",
			"\t\t\t{",
			"\t\t\t\tconsole.log(\"err from registerUser\", err)",
			"\t\t\t\tdispatch({ type: REGISTER_USER_FAIL, payload: err })",
			"\t\t\t})",
			"}"
		],
		"description": "register user action which dispatches to reducer"
	},
	"Login User Action":
	{
		"prefix": "lgu",
		"body": [
			"export const loginUser = (creds) => dispatch =>",
			"{",
			"\tdispatch({ type: LOGIN_USER_START })\n",
			"\taxios",
			"\t\t.post(`\\${endPoint}/login`, creds)",
			"\t\t.then(res =>",
			"\t\t\t{",
			"\t\t\t\tconsole.log(\"res from loginUser:\", res)",
			"\t\t\t\tdispatch({ type: LOGIN_USER_SUCCESS, payload: res })",
			"\t\t\t})",
			"\t\t.catch(err =>",
			"\t\t\t{",
			"\t\t\t\tconsole.log(\"err from loginUser\", err)",
			"\t\t\t\tdispatch({ type: LOGIN_USER_FAIL, payload: err })",
			"\t\t\t})",
			"}"
		],
		"description": "login user action which dispatches to reducer"
	}
}